{"version":3,"sources":["components/AddUserForm.tsx","components/AppContainer.tsx","components/UserList.tsx","api/fetchClient.ts","App.tsx","useUsers.ts","api/users.service.ts","api/color.service.ts","index.tsx"],"names":["AddUserForm","React","memo","colors","addUser","useState","name","setName","colorId","setColorId","isNameError","setIsNameError","isColorError","setIsColorError","selectedColor","find","c","id","onSubmit","e","preventDefault","Divider","style","padding","display","alignItems","justifyContent","TextField","variant","label","width","value","onChange","target","error","Select","color","MenuItem","disabled","map","LoadingButton","type","AppContainer","children","Paper","elevation","position","top","left","transform","Typography","textAlign","marginBottom","UserList","users","user","ListItemButton","ListItemIcon","fontSize","carColor","ListItemText","primary","BASE_URL","process","request","url","delay","data","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","ok","Error","json","client","colorosFromServer","App","setUsers","isLoading","setIsLoading","useEffect","all","serverUsers","carColorId","finally","useUsers","useCallback","console","log","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b3fc938.chunk.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport {\n  Divider, MenuItem, Select, TextField,\n} from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { Color } from '../types';\n\ninterface Props {\n  colors: Color[];\n  addUser: (name: string, carColorId: number) => void;\n}\n\nexport const AddUserForm: FC<Props> = React.memo(({ colors, addUser }) => {\n  const [name, setName] = useState('');\n  const [colorId, setColorId] = useState(0);\n  const [isNameError, setIsNameError] = useState(false);\n  const [isColorError, setIsColorError] = useState(false);\n\n  const selectedColor = colors.find(c => c.id === colorId);\n\n  const onSubmit = () => {\n    if (!name || !colorId) {\n      setIsNameError(!name);\n      setIsColorError(!colorId);\n\n      return;\n    }\n\n    addUser(name, colorId);\n\n    setName('');\n    setColorId(0);\n  };\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        onSubmit();\n      }}\n    >\n      <Divider />\n\n      <div style={{\n        padding: '16px 0 16px', display: 'flex', alignItems: 'end', justifyContent: 'space-between',\n      }}\n      >\n        <TextField\n          variant=\"standard\"\n          label=\"Name\"\n          style={{ width: '45%' }}\n          value={name}\n          onChange={e => {\n            setName(e.target.value);\n            setIsNameError(false);\n          }}\n          error={isNameError}\n        />\n\n        <Select\n          label=\"Car color\"\n          style={{ width: '45%', color: selectedColor?.name || 'currentColor' }}\n          variant=\"standard\"\n          value={colorId}\n          onChange={e => {\n            setIsColorError(false);\n            setColorId(+e.target.value);\n          }}\n          error={isColorError}\n        >\n          <MenuItem value={0} disabled>\n            Color\n          </MenuItem>\n          {colors.map(color => (\n            <MenuItem\n              key={color.id}\n              style={{ color: color.name }}\n              value={color.id}\n            >\n              {color.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </div>\n      <LoadingButton\n        type=\"submit\"\n        variant=\"outlined\"\n        style={{ width: '100%' }}\n      >\n        Add new player\n      </LoadingButton>\n    </form>\n  );\n});\n","import React, { FC } from 'react';\nimport { Divider, Paper, Typography } from '@mui/material';\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport const AppContainer: FC<Props> = React.memo(({ children }) => {\n  return (\n    <Paper\n      elevation={10}\n      style={{\n        padding: '20px',\n        width: '30%',\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    >\n      <Typography\n        variant=\"h2\"\n        style={{ textAlign: 'center', marginBottom: '16px' }}\n      >\n        Users`\n        board\n      </Typography>\n\n      {children}\n\n      <Divider />\n    </Paper>\n  );\n});\n","import React, { FC } from 'react';\nimport { ListItemButton, ListItemIcon, ListItemText } from '@mui/material';\nimport DirectionsCarFilledIcon from '@mui/icons-material/DirectionsCarFilled';\nimport { UserWithColor } from '../types';\n\ninterface Props {\n  users: UserWithColor[];\n}\n\nexport const UserList: FC<Props> = React.memo(({ users }) => {\n  return (\n    <>\n      {users.map(user => (\n        <ListItemButton key={user.id}>\n          <ListItemIcon>\n            <DirectionsCarFilledIcon fontSize=\"large\" style={{ color: user?.carColor?.name || 'black' }} />\n          </ListItemIcon>\n          <ListItemText primary={user.name} />\n        </ListItemButton>\n      ))}\n    </>\n  );\n});\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = process.env.REACT_APP_API_URL;\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useCallback } from 'react';\nimport './App.scss';\nimport { AddUserForm } from './components/AddUserForm';\nimport { AppContainer } from './components/AppContainer';\nimport { UserList } from './components/UserList';\nimport { useUsers } from './useUsers';\nimport { postUser } from './api/users.service';\n\nconst colorosFromServer = [\n  { id: 1, name: 'Black' },\n  { id: 2, name: 'DeepPink' },\n  { id: 3, name: 'Red' },\n  { id: 4, name: 'Aquamarine' },\n  { id: 5, name: 'Gold' },\n  { id: 6, name: 'YellowGreen' },\n  { id: 7, name: 'Yellow' },\n];\n\nexport const App: React.FC = () => {\n  const { isLoading, users } = useUsers();\n\n  const addUser = useCallback((name: string, carColorId: number) => {\n    // eslint-disable-next-line no-console\n    console.log('Here we need to add method implementation', name, carColorId);\n    postUser({\n      name,\n      carColorId,\n    // eslint-disable-next-line no-alert\n    }).then(() => alert('User added, please refresh page'));\n  }, []);\n\n  if (isLoading) {\n    return <div>Is Loading...</div>;\n  }\n\n  return (\n    <AppContainer>\n      <UserList users={users} />\n\n      <AddUserForm colors={colorosFromServer} addUser={addUser} />\n    </AppContainer>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { UserWithColor } from './types';\nimport { getColors } from './api/color.service';\nimport { getUsers } from './api/users.service';\n\nexport const useUsers = () => {\n  const [users, setUsers] = useState<UserWithColor[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    Promise.all([getUsers(), getColors()])\n      .then(([serverUsers, colors]) => {\n        setUsers(\n          serverUsers.map((user) => ({\n            ...user,\n            carColor: colors.find((color) => color.id === user.carColorId),\n          })),\n        );\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return { users, isLoading };\n};\n","import { User } from '../types';\nimport { client } from './fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUser = (id: number) => {\n  return client.get<User>(`/users/${id}`);\n};\n\nexport const postUser = (user: Omit<User, 'id'>) => {\n  return client.post<User>('/users', user);\n};\n","import { Color } from '../types';\nimport { client } from './fetchClient';\n\nexport const getColors = () => {\n  return client.get<Color[]>('/colors');\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}